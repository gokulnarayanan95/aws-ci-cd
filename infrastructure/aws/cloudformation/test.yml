AWSTemplateFormatVersion: "2010-09-09"
Description: A sample template


Parameters:
  volumesize:
    Description: Volume size EC2
    Type: "String"
  volumeType:
    Description: Volume Type EC2
    Type: "String"
  instanceType:
    Description: Instance Type EC2
    Type: "String"
  imageId:
    Description: Image Id EC2
    Type: "String"
  subnetId:
    Description: Subnet Id EC2
    Type: "String"
  keyName:
    Description: KeyName pair EC2
    Type: "String"
  webSecGrpName:
    Description: Webserver security group name
    Type: "String"
  webSecGrpDesc:
    Description: Webserver security group description
    Type: "String"
  vpcId:
    Description: Webserver security VpcId
    Type: "String"
  rdsSecGrpName:
    Description: Webserver security VpcId
    Type: "String"
  rdsSecGrpDesc:
    Description: Webserver security VpcId
    Type: "String"
  dbHostName:
    Description: RDS Host 
    Type: "String" 
  dbUserName:
    Description: RDS Username
    Type: "String" 
  dbPassword:
    Description: RDS Password
    Type: "String"  
  dbDatabaseName:
    Description: RDS Password
    Type: "String" 
  awsBucketName:
    Description: RDS Password
    Type: "String"
  profileName:
    Description: profile Name
    Type: "String"
  ExportStackName:
    Description: The name of the stack that exports the values
    Type: String
  ZoneID:
    Description: Zone ID for route53 record set
    Type: String
  domainName:
    Description: DOMAIN NAME
    Type: String
  CertificateARN:
    Description: SSL Certificate ARN for domain
    Type: String

Resources:  
  asgLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      LaunchConfigurationName: asg_launch_config
      ImageId: ami-9887c6e7
      InstanceType: t2.micro
      KeyName:
        Ref: keyName
      AssociatePublicIpAddress: 'true'
      SecurityGroups:
      - Ref: WebServerSecurityGroup
      BlockDeviceMappings:
      - DeviceName: "/dev/sdm"
        Ebs:
          VolumeType: gp2
          VolumeSize: '20'
      IamInstanceProfile: !Ref profileName
      UserData:
        Fn::Base64:
          Fn::Join:
          - "\n"
          - - "#!/bin/bash"
            - yum update -y
            - yum install ruby -y
            - yum update
            - yum install wget -y
            - yum update
            - cd /home/centos
            - wget https://aws-codedeploy-us-east-1.s3.amazonaws.com/latest/install
            - chmod +x ./install
            - ./install auto
            - service codedeploy-agent start -y
            - systemctl daemon-reload
            - yum install -y gcc-c++ make -y
            - curl -sL https://rpm.nodesource.com/setup_8.x | bash -
            - yum install nodejs -y
            - yum install wget -y
            - wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm
            - yum install epel-release -y
            - rpm -ivh mysql-community-release-el7-5.noarch.rpm
            - yum update -y
            - yum install mysql-server -y
            - Fn::Join:
              - ''
              - - echo host=
                - Fn::GetAtt:
                  - RDSInstance
                  - Endpoint.Address
                - ",bucket="
                - Ref: awsBucketName
                - "> out.txt;"
            - Fn::Join: 
              - ""
              - - "mysql -h "
                - Fn::GetAtt:
                  - RDSInstance
                  - Endpoint.Address
                - " -u "
                - Ref: dbUserName
                - " -p" 
                - Ref: dbPassword
                - " -e "
                - "\"use authentication; create table if not exists auth(username varchar(255), password varchar(255)); create table if not exists attachmentlog (id varchar(255), transactionID varchar(255), path varchar(255)); create table if not exists transaction(username varchar(255), id varchar(255), description varchar(255), merchant varchar(255), amount varchar(255),date varchar(255),category varchar(255));\"" 
            - cd ~
            - wget https://s3.amazonaws.com/amazoncloudwatch-agent/centos/amd64/latest/amazon-cloudwatch-agent.rpm
            - wget https://s3.amazonaws.com/amazoncloudwatch-agent/assets/amazon-cloudwatch-agent.gpg
            - wget https://s3.amazonaws.com/amazoncloudwatch-agent/centos/amd64/latest/amazon-cloudwatch-agent.rpm.sig
            - gpg --import amazon-cloudwatch-agent.gpg
            - gpg --fingerprint 3B789C72
            - wget https://s3.amazonaws.com/amazoncloudwatch-agent/centos/amd64/latest/amazon-cloudwatch-agent.rpm.sig
            - gpg --verify amazon-cloudwatch-agent.rpm.sig amazon-cloudwatch-agent.rpm   
            - sudo rpm -U ./amazon-cloudwatch-agent.rpm     

            
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref awsBucketName
      AccessControl: Private


  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Ref webSecGrpName
      GroupDescription: !Ref webSecGrpDesc
      VpcId:
        Fn::ImportValue: !Sub '${ExportStackName}-vpcId'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          CidrIp: 0.0.0.0/0

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Ref rdsSecGrpName
      VpcId:
        Fn::ImportValue: !Sub '${ExportStackName}-vpcId'
      GroupDescription: !Ref rdsSecGrpDesc

  RDSIngressSecurity:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId: !Ref WebServerSecurityGroup
      GroupId: !Ref RDSSecurityGroup


  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet for RDS instances
      SubnetIds:
        - Fn::ImportValue: !Sub '${ExportStackName}-PublicSubnet1'
        - Fn::ImportValue: !Sub '${ExportStackName}-PublicSubnet2'
        

  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref dbDatabaseName
      AllocatedStorage: 100
      DBInstanceClass: db.t2.medium
      Engine: MySQL
      PubliclyAccessible: false
      DBSubnetGroupName: !Ref DBSubnetGroup
      DBInstanceIdentifier: csye6225-fall2018
      MasterUsername: !Ref dbUserName
      MasterUserPassword: !Ref dbPassword
      MultiAZ: false 
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
        
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: asg_autoscaling_group
      VPCZoneIdentifier:
      - Fn::ImportValue: !Sub '${ExportStackName}-PublicSubnet1'
      - Fn::ImportValue: !Sub '${ExportStackName}-PublicSubnet2'
      Cooldown: '60'
      DesiredCapacity: '3'
      LaunchConfigurationName:
        Ref: asgLaunchConfig
      TargetGroupARNs:
      - Ref: ALBTargetGroup
      MinSize: '3'
      MaxSize: '10'
      Tags:
      - Key: EC2Key 
        Value: EC2Value
        PropagateAtLaunch: 'true'
      - Key: AsgName
        Value:
          Ref: asgLaunchConfig
        PropagateAtLaunch: 'true'
        
  WebServerScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: AutoScalingGroup
      Cooldown: '60'
      ScalingAdjustment: '1'
      
  WebServerScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: AutoScalingGroup
      Cooldown: '60'
      ScalingAdjustment: "-1"
      
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-up if CPU > 90% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '60'
      EvaluationPeriods: '2'
      Threshold: '10'
      AlarmActions:
      - Ref: WebServerScaleUpPolicy
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          Ref: AutoScalingGroup
      ComparisonOperator: GreaterThanThreshold
      
  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-down if CPU < 70% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '60'
      EvaluationPeriods: '2'
      Threshold: '8'
      AlarmActions:
      - Ref: WebServerScaleDownPolicy
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          Ref: AutoScalingGroup
      ComparisonOperator: LessThanThreshold
      
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
      - Fn::ImportValue: !Sub '${ExportStackName}-PublicSubnet1'
      - Fn::ImportValue: !Sub '${ExportStackName}-PublicSubnet2'
      SecurityGroups:
      - Ref: WebServerSecurityGroup
      
  HTTPListener:    
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
    - ALBTargetGroup
    - ApplicationLoadBalancer
    Properties:
      DefaultActions:
      - Type: redirect
        RedirectConfig:
          Port: '443'
          Protocol: HTTPS
          StatusCode: HTTP_301
      LoadBalancerArn:
        Ref: ApplicationLoadBalancer
      Port: '80'
      Protocol: HTTP

  myDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId:
        Ref: ZoneID
      Comment: Resource record for load balancer application
      Name:
        Ref: domainName
      Type: A
      AliasTarget:
        HostedZoneId:
          Fn::GetAtt:
          - ApplicationLoadBalancer
          - CanonicalHostedZoneID
        DNSName:
          Fn::GetAtt:
          - ApplicationLoadBalancer
          - DNSName
      
  ElasticLBListener2:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: ALBTargetGroup
      LoadBalancerArn:
        Ref: ApplicationLoadBalancer
      Port: '443'
      Protocol: HTTPS
      Certificates:
      - CertificateArn:
          Ref: CertificateARN
          
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: '30'
      HealthCheckTimeoutSeconds: '5'
      HealthyThresholdCount: '3'
      UnhealthyThresholdCount: '5'
      Name: MyALBTargetGroup
      Port: '80'
      Protocol: HTTP
      VpcId:
        Fn::ImportValue: !Sub '${ExportStackName}-vpcId'
      TargetGroupAttributes:
      - Key: stickiness.enabled
        Value: 'true' 
        
Outputs:
  MyLoadBalancer:
    Description: Application Load balancer in autoscaling stack
    Value:
      Ref: ApplicationLoadBalancer
    Export:
      Name:
        Fn::Sub: "${ExportStackName}-ALB"
